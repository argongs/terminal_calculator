--------------------------
|modes
Modes of usage :

>direct operation
1. Direct operation mode :
$ compute [options] [real numbers seperated by <space>]

[options]:
 -a	
 Perform addition.
 -m	
 Perform multiplication.
Examples :
$ compute -a 1 -2.3 3.45 -4.567 # equivalent to 1.1-2.3+3.45-4.567
$ compute -m 1 -2.3 4.5 # equivalent to 1*(-2.3)*4.5

>expression
2. Expression mode :
$ compute [angle_unit] [mathematical expression]

[angle_unit]:
 -d 
 set 'degree' as the unit of the input given to the trigonometric functions
 -r 
 set 'radian' as the unit of the input given to the trigonometric functions
- This option will allow toggling of the unit of the input given to the trigonometric functions. Note that the default unit is 'radians' for the input of trigonometric functions. Hence, using '-r' option or keeping [angle_unit] blank will set the unit to 'radians'. However, to change the unit to 'degrees', '-d' option is necessary.  
Examples :
$ compute -d 'cos(45)' #equivalent to cos(45 degrees)
$ compute 'cos(45)' #equivalent to cos(45 radians)

[mathematical expression]:
- Any mathematical expression that can be created by using the supported operators.
The supported operators are : + - * / ^
Examples:
$ compute 1+2 
$ compute 1+2*3 

>info
3. Information mode :
$ compute [about]

[about]:
 -h [topic] 
  Obtain help according to the input [topic]
 -v	
  Obtain version of this program

[topic]:
- This is a necessary argument for the help option of terminal_calculator. If you do not provide a value for [topic], then terminal_calculator will throw an error and show all the valid values for [topic] (or the valid topic names if you may).
- To know which all topics are recognized by the help option, simply hit the `compute -h` on the terminal. Although this throws an error message, but still it gets the job done. Now this is what you call using a bug as a feature (or something closer to it)!.
- To see the entirety of the help document, simply use 'all' as the topic name.
>
|
Points to keep in mind :
------------------------
>parentheses
- Parentheses are allowed, but only in the expression mode. Use it as much as you want in that mode. However enclose the expression in quotes i.e. '', whenever you wish to make use of the parentheses.
Examples:
Correct usage - 
$ compute '(1+2)' 
$ compute '(1+2)*3'
Incorrect usage -
$ compute (1+2) 
$ compute (1+2)*3

>operator precedence
- The operators are evaluated according to the following precedence rule (high to low):
 Parenthesis > Exponential > Division > Multiplication > Addition > Subtraction

>mathematical constant
- Euler's constant and Pi are availible in ready to use format. Euler's constant can be used by making use of 'e' and Pi can be used by making use of 'pi' in the expression as well as direct operation mode.
  i. In expression mode :
     $ compute pi+e 
     $ compute '(e+pi)*90'
 ii. In direct operation mode :
     $ compute -a pi ~e 1 2
     $ compute -a ~pi e
     $ compute -m ~pi 4 4
     $ compute -m ~e 3 4  
 Notice the presence of '~' character in the direct operation mode. What does it indicate?
It indicates negative sign. It's meant to be used only with the constants and that too in the direct operation mode. It helps the program to capture negative constants. Note that this character is illegal in the expression mode. There's no need to use this sign in expression mode since regular representation of minus sign i.e. '-' character works perfectly over there for both numbers as well as constants.

>negative numbers 
- If you wish to use negative nos. in the expression, then make sure to enclose each and every negative no. in parentheses to ensure correct evaluation. Otherwise, the program might consider your input as invalid.
Examples:
Correct usage - 
$ compute '1*(-2)' 
$ compute 'e^(-1)'
Incorrect usage -
$ compute 1*-3
$ compute e^-1

>functions
- The following functions can be directly made use of in the expression mode :
  i. Trigonometric functions -
>trigonometric  
  - sin(), cos()& tan()
  - Examples :   
	compute 'sin(pi)+cos(pi)'
	compute 'tan(sin((cos(pi))))'
  - Note that the trigonometric functions treat the unit of the input angles as 'radians' by default.

ii. Logarithmic functions -
>logarithmic
  - log2() loge() log10() (representing log at base 2, e and 10 respectively) 
  - Examples :
    compute log10(100)
    compute log2(1024)/loge(e^2)
   
>white spaces
- White spaces are now allowed in the expression mode. However you need to enclose the expression inside the quotes i.e. `''`, if you wish to use white spaces in your expression. Otherwise in the absence of these characters, error will occur. Keep that in mind and then you are free to use as much spaces as you wish in your expressions. See the examples below :
Correct usage :
$ compute '4 + 6'
$ compute '1 + 2 * 3'
Incorrect usage :
$ compute 4 + 6
$ compute 1 + 2 * 3
